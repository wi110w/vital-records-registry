# -*- coding: utf-8 -*-
# Generated by Django 1.9.4 on 2016-04-23 12:54
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='RegistryUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.')], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name_plural': 'users',
                'abstract': False,
                'verbose_name': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ApplicantInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='name')),
                ('last_name', models.CharField(max_length=64, verbose_name='last_name')),
                ('patronymic', models.CharField(max_length=64, verbose_name='patronymic')),
            ],
        ),
        migrations.CreateModel(
            name='BirthEvidence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=64, verbose_name='title')),
                ('number', models.CharField(max_length=32, verbose_name='number')),
                ('issue_date', models.DateField(verbose_name='issue date')),
                ('issuer', models.CharField(blank=True, max_length=255, verbose_name='issued by organisation')),
            ],
        ),
        migrations.CreateModel(
            name='BirthNoteLaw',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('law', models.CharField(max_length=255, verbose_name='law')),
            ],
        ),
        migrations.CreateModel(
            name='BirthPlace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(max_length=45, verbose_name='country')),
                ('region', models.CharField(max_length=64, verbose_name='region')),
                ('district', models.CharField(max_length=64, verbose_name='district')),
                ('city', models.CharField(max_length=64, verbose_name='city')),
            ],
        ),
        migrations.CreateModel(
            name='DeathEvidence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=64, verbose_name='title')),
                ('number', models.CharField(max_length=32, verbose_name='number')),
                ('issue_date', models.DateField(verbose_name='issue date')),
                ('issuer', models.CharField(max_length=255, verbose_name='issuer')),
                ('additional_info', models.TextField(blank=True, verbose_name='additional info')),
            ],
        ),
        migrations.CreateModel(
            name='DeathPlace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(max_length=45, verbose_name='country')),
                ('region', models.CharField(max_length=45, verbose_name='region')),
                ('district', models.CharField(max_length=45, verbose_name='district')),
                ('city', models.CharField(max_length=45, verbose_name='city')),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=45, verbose_name='title')),
                ('series', models.CharField(max_length=45, verbose_name='series')),
                ('number', models.CharField(max_length=45, verbose_name='number')),
                ('issued_by', models.CharField(max_length=45, verbose_name='issued by organisation')),
                ('issue_date', models.DateField(verbose_name='issue date')),
            ],
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='note creation time')),
                ('compose_date', models.DateField(blank=True, verbose_name='note record compose time')),
                ('was_restored', models.BooleanField(default=False, verbose_name='was restored')),
                ('official_info', models.CharField(max_length=255, verbose_name='official info')),
                ('status', models.CharField(max_length=45, verbose_name='status')),
                ('notes', models.TextField(blank=True)),
                ('language', models.CharField(max_length=45, verbose_name='language')),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='name')),
                ('last_name', models.CharField(max_length=64, verbose_name='last name')),
                ('patronymic', models.CharField(max_length=64, verbose_name='patronymic')),
                ('gender', models.BooleanField(verbose_name='gender')),
                ('date_of_birth', models.DateField(verbose_name='date of birth')),
                ('nationality', models.CharField(blank=True, max_length=45, verbose_name='nationality')),
                ('family_status', models.BooleanField(verbose_name='family status')),
                ('military_service', models.BooleanField(verbose_name='military service')),
                ('birth_place', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='vital_records.BirthPlace')),
            ],
        ),
        migrations.CreateModel(
            name='Registrar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
            ],
        ),
        migrations.CreateModel(
            name='Residence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('postal_code', models.PositiveIntegerField(verbose_name='postal code')),
                ('country', models.CharField(max_length=45, verbose_name='country')),
                ('region', models.CharField(max_length=64, verbose_name='region')),
                ('district', models.CharField(max_length=64, verbose_name='district')),
                ('city', models.CharField(max_length=64, verbose_name='city')),
                ('street', models.CharField(max_length=64, verbose_name='street')),
                ('house', models.CharField(max_length=45, verbose_name='house')),
                ('room', models.CharField(blank=True, max_length=45, verbose_name='room')),
            ],
        ),
        migrations.CreateModel(
            name='BirthNote',
            fields=[
                ('note_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='vital_records.Note')),
                ('note_number', models.PositiveIntegerField(verbose_name='note number')),
                ('deadline_passed', models.BooleanField(verbose_name='deadline passed')),
                ('stillborn', models.BooleanField(verbose_name='stillborn')),
                ('children_born_count', models.PositiveIntegerField(verbose_name='children born count')),
                ('child_number', models.PositiveIntegerField(verbose_name='children number')),
                ('birth_date', models.DateField(verbose_name='date of birth')),
                ('child_gender', models.BooleanField(verbose_name='gender')),
                ('child_name', models.CharField(max_length=64, verbose_name='name')),
                ('child_last_name', models.CharField(max_length=64, verbose_name='last name')),
                ('child_patronymic', models.CharField(max_length=64, verbose_name='patronymic')),
                ('father_info_reason', models.TextField(verbose_name='father info reason')),
                ('military_service', models.BooleanField(verbose_name='military service')),
                ('birth_evidences', models.ManyToManyField(to='vital_records.BirthEvidence')),
                ('birth_place', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='vital_records.BirthPlace')),
                ('law', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='vital_records.BirthNoteLaw')),
            ],
            bases=('vital_records.note',),
        ),
        migrations.CreateModel(
            name='DeathNote',
            fields=[
                ('note_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='vital_records.Note')),
                ('date_of_death', models.DateField(verbose_name='date of death')),
                ('death_reason', models.TextField(blank=True, verbose_name='reason of death')),
                ('rehabilitation_statements', models.CharField(max_length=45, verbose_name='rehabilitation statements')),
                ('death_evidence', models.ManyToManyField(to='vital_records.DeathEvidence')),
                ('death_place', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='vital_records.DeathPlace')),
                ('discarded_documents', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='vital_records.Document')),
            ],
            bases=('vital_records.note',),
        ),
        migrations.CreateModel(
            name='MarriageNote',
            fields=[
                ('note_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='vital_records.Note')),
                ('note_number', models.PositiveIntegerField(verbose_name='note number')),
                ('marriage_date', models.DateField(verbose_name='marriage date')),
            ],
            bases=('vital_records.note',),
        ),
        migrations.AddField(
            model_name='registrar',
            name='residence',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='vital_records.Residence'),
        ),
        migrations.AddField(
            model_name='person',
            name='residence',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='vital_records.Residence'),
        ),
        migrations.AddField(
            model_name='note',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='note',
            name='registrar',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='vital_records.Registrar'),
        ),
        migrations.AddField(
            model_name='applicantinfo',
            name='residence',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='vital_records.Residence'),
        ),
        migrations.AddField(
            model_name='registryuser',
            name='registrar',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='vital_records.Registrar'),
        ),
        migrations.AddField(
            model_name='registryuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='marriagenote',
            name='husband',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='male_marriages', to='vital_records.Person'),
        ),
        migrations.AddField(
            model_name='marriagenote',
            name='wife',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='female_marriages', to='vital_records.Person'),
        ),
        migrations.AddField(
            model_name='deathnote',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='vital_records.Person'),
        ),
        migrations.AddField(
            model_name='birthnote',
            name='parents',
            field=models.ManyToManyField(to='vital_records.Person'),
        ),
    ]
